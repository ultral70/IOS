//Esto sería un comentario de una linea

/*
Esto sería un comentario de
varias líneas
*/

//XCODE sería el IDE de IOS. Sería equivalente al Eclipse

/*
Swift es un lenguaje orientado a objetos y que aporta
mucho "azúcar sintáctico", es decir, que el código es bastante
agradable para los programadores
*/

//Podemos declarar constantes con la palabra "let"

let maximoNumeroDeIntentos = 10

//Podemos ver que no estamos ponienodo el tipo de la variable
/*
Swift es un lenguaje TIPADO, es decir, las variales tienen
un tipo de variable.
El tipo de la variable es optativo, si no lo ponemos, swift hace lo que
se llama "inferencia de tipos", es decir, que en tiempos de ejecución
decide el tipo de la variable, y esa variable permanecerá de ese tipo
durante el resto del programa
Nótese la diferencia con Javascript
*/

//Podemos ejecutar código pulsando el botón de play que hay sobre el número de línea

//Podemos declarar variables utilizando la palabra "var"

var variable1 = 25  //Esta variable es entera (int)
variable1 = 45

//Esto de aquí abajo fallaría, variable1 es de tipo String
//variable1 = "Son Goku";

//Podemos decir qel tipo de la variable al mismo tiempo que la declaremos

var variableString : String = "Esto sería una frase"

//una de las ventajas del "azúcar sintáctico" es que no hace falta poner ";"

print(maximoNumeroDeIntentos)
print(variable1)

//Podemos concatenar Strings con "+"
print("El valor de la variable String es: " + variableString)

//OJO esto no vale para otras variables que no sean String
//print("El valor de variable1 es: " + variable1)

//Podemos solucionarlo de dos maneras
//1- Convertir el entero en un String
print("El valor de la variable String es: " + String(variable1))

//2- Expandir la variable dentro del String
//Expandir la variable quiere decir que, dentro de 
//una cadena, queremos obtener el valor de la variable
print("El valor de la variable String es: \(variable1)")

//Otras maneras
var x = 0.0, y = 1.0, z = 3.0

//fijaos que si pongo directamente un entero o
// un double no hace falta convertirlo
print(x)

//Podemos declarar también con tipo
var cadena1, cadena2, cadena3 : String

//para saber el tipo que guarda una variable, podemos usar type
type(of:cadena1) //String
print(type(of:cadena1))

//Para copiar pegar en máquina virtual "Windows + c"
//y  "windows + v"

print(type(of: variable1)) //INT

//Si tenéis instaladas las vmwaretools, podéis copiar 
//texto de la máquina virtual a windows y viceversa

//Podemos hacer alias sobre kis tipos de las variables
//TYPEALIAS
typealias MiTipoEntero = Int 
var numero1 : MiTipoEntero = 56
var numero2 : MiTipoEntero; //MiTipoEntero - Int
numero1 = 67
print(numero1)

//Tuplas
//Son equivalentes a las estructuras de C.
//Lo que hacen es permitir agrupar objetos entre sí

var tupla1 = (45, 37, 89)
//Por ejemplo, si queremos guardar nombre, apellidos, edad y peso
var tupla2 = ("Hommer", "Simpson", 38, 100)
//Nombre, Apellidos, edad, peso, número de hijos
var tupla3 = ("Marge", "Simpson", 36, 60, [3])

//Acceder a los valores de las tuplas
print(tupla1.0) //45
print(tupla2.0) //Simpson
print(tupla3.1) //Simpson

print(tupla2)

//Podemos cambiar el valor de una tupla
tupla2.2 = 40 //edad de hommer a 40
print(tupla2)

//Podemos crear tuplas con tipos por defecto
var qq : (Int, String, Double) = (1,"Bart",45.5)
print(qq)

// Esto daría error
//qq = (2,"Marge","pepe")

//Algunas operaciones con tuplas
//Pattern Matching
//Asignacion de variable muy flexible, donde indicamos el patros al compilador
//y el compilador se las busca para encajar los valores donde sea posible

//fijemonos el la tupla de hommer
//estamos creando 4 variables nuevas y swift intenta encajar cada valor de la
//tupla2 a cada una de las variables nuevas
var (nombre,apellidos,edad, peso) = tupla2
print(nombre)
print(apellidos)
print(edad)
print(peso)

peso = 110
print(tupla2)
//para cambiar el peso de la tupla
tupla2.3 = peso
tupla2.3 = 110

//si quereis extraer solamente X valores de una tupla unas variables, podemos usar "_"
var (nombre2,_,edad2,_,_) = tupla3
print(nombre2)
print(edad2)

//Optionals
//Utilizaremos opcionales cuando una variable pueda no tener valor, es decir, apunte
//a nulo, en swift nulo se representa por "nil". En una variable normal, que no sea optional
//no podemos apuntarla a "nil
//var variableNula : String = nil //error porque es una variable normal, es decir, NO es optional

//Para crear un optinal tenemos varias maneras
//podemos usar ?, de esta manera ya podemos tener en una variable valores nulos (nil)
var variableNula : String?//se pone "?" despues del tipo
variableNula = nil
variableNula = "Valor de la variable"

//En swift todo es un objeto, por lo que si creamos una variable entera sufre
//la misma problematica con los optionals
var numeroNulo : Int?
numeroNulo = 34
numeroNulo = nil

var numero3 = 45;
//numero3 = nil //error porque por defecto las variables NO son optinal
print(type(of: numeroNulo))
print(type(of: numero3))

//El concepto de optinal esta muy ligado al concepto de "envoltorio" o en ingles
//tipo "wrapper". Un objeto tipo wrapper es un objeto que envuelve a otro objeto

//Podemos tener problemas en caso de que queramos trabajar con variables optionales y variables
//que no lo sean
var variableNormal : String = "Esto es un String"
//No podemos apuntar directamente desde una variable normal a una variable optional
//variableNormal = variableNula //Error
//Si que podemos apuntar con una variable optional a una variable normal
variableNula = variableNormal
//print(variableNula)

//Como podemos solucionarlo?
//Tenemos que hacer un "unwrapper" o "desenvolver la variable optional"
//poniendo "!" al final de la variable optional
variableNormal = variableNula!
print(variableNormal)
//ojo con valores nulos!
variableNula = nil
//la siguiente linea no daría error en tiempo de compilacion, pero si lo daria
//en tiempo de ejecucion, así ojo con los posibles nulos
//variableNormal = variableNula!

//Podemos hacer que los optionals hagan un "auto-unwrapper"
var variableAutoUnwrapper : String! = "Pepe" //hacemos un optional auto-unwrapper
variableNormal = variableAutoUnwrapper //ahora no tengo que hacer un wrapper especifico
                                    //lo hace de manera automatica